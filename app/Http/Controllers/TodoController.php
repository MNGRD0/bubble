<?php

namespace App\Http\Controllers;

// On importe les classes n√©cessaires
use Illuminate\Http\Request;      // Pour lire les donn√©es du formulaire ou de l'URL
use App\Models\Category;          // Le mod√®le des cat√©gories de t√¢ches
use App\Models\Task;              // Le mod√®le des t√¢ches
use Auth;                         // Pour acc√©der √† l'utilisateur connect√©

class TodoController extends Controller
{
    // üü¢ Affiche la page principale avec toutes les cat√©gories de l‚Äôutilisateur connect√©
    public function index()
    {
        // On lit le param√®tre "sort_by" de l‚ÄôURL ou formulaire (par d√©faut : ordre alphab√©tique croissant)
        $sortBy = request('sort_by', 'name_asc');

        // En fonction du tri choisi, on r√©cup√®re les cat√©gories de l‚Äôutilisateur tri√©es diff√©remment
        switch ($sortBy) {
            case 'name_desc':
                $categories = Category::where('user_id', Auth::id())->orderBy('name', 'desc')->get();
                break;
            case 'created_at_desc':
                $categories = Category::where('user_id', Auth::id())->orderBy('created_at', 'desc')->get();
                break;
            case 'created_at_asc':
                $categories = Category::where('user_id', Auth::id())->orderBy('created_at', 'asc')->get();
                break;
            case 'name_asc':
            default:
                $categories = Category::where('user_id', Auth::id())->orderBy('name', 'asc')->get();
                break;
        }

        // On affiche la vue avec la variable $categories
        return view('todo.index', compact('categories'));
    }

    // üü¢ Cr√©e une nouvelle cat√©gorie de t√¢ches
    public function storeCategory(Request $request)
    {
        // On valide que le champ "name" est pr√©sent, texte, et pas trop long
        $request->validate([
            'name' => 'required|string|max:255',
        ]);

        // On enregistre la cat√©gorie dans la base de donn√©es avec le nom et l‚Äôutilisateur connect√©
        Category::create([
            'name' => $request->name,
            'user_id' => Auth::id(),
        ]);

        // On redirige vers la page des to-do avec un message flash
        return redirect()->route('todo.index')->with('task_added', 'Cat√©gorie ajout√©e avec succ√®s !');
    }

    // üü¢ Affiche les t√¢ches d‚Äôune seule cat√©gorie
    public function showCategory($id)
    {
        // On r√©cup√®re la cat√©gorie (ou erreur 404 si elle n‚Äôexiste pas)
        $category = Category::findOrFail($id);
        // On r√©cup√®re toutes les t√¢ches li√©es √† cette cat√©gorie (relation dans le mod√®le)
        $tasks = $category->tasks;

        // On affiche la vue avec les donn√©es
        return view('todo.show', compact('category', 'tasks'));
    }

    // üü¢ Ajoute une t√¢che √† une cat√©gorie
    public function storeTask(Request $request, $categoryId)
    {
        // On valide le champ "task"
        $request->validate([
            'task' => 'required|string|max:255',
        ]);

        // On cr√©e la t√¢che en la liant √† la bonne cat√©gorie
        Task::create([
            'name' => $request->task,
            'category_id' => $categoryId,
            'completed' => false, // La t√¢che est non termin√©e au d√©but
        ]);

        // On retourne √† la page de la cat√©gorie avec un message flash
        return redirect()->route('todo.show', $categoryId)->with('task_added', 'T√¢che ajout√©e avec succ√®s !');
    }

    // üü¢ Marque une t√¢che comme termin√©e
    public function completeTask($taskId)
    {
        // On r√©cup√®re la t√¢che
        $task = Task::findOrFail($taskId);
        $task->completed = true; // On la coche comme termin√©e
        $task->save(); // On enregistre

        return back(); // On revient √† la page pr√©c√©dente
    }

    // üü¢ Restaure une t√¢che (la remet en "non termin√©e")
    public function restoreTask($taskId)
    {
        $task = Task::findOrFail($taskId);
        $task->completed = false; // On la d√©coche
        $task->save();

        return back();
    }

    // üü¢ Supprime une t√¢che de la base
    public function destroyTask($taskId)
    {
        Task::findOrFail($taskId)->delete(); // Trouve et supprime

        return back()->with('task_added', 'T√¢che supprim√©e avec succ√®s !');
    }

    // üü¢ Supprime une cat√©gorie enti√®re
    public function destroyCategory($categoryId)
    {
        Category::findOrFail($categoryId)->delete();

        return redirect()->route('todo.index')->with('task_added', 'Cat√©gorie supprim√©e avec succ√®s !');
    }
}
